'''
slice 英 [s laɪs]
n.(切下的食物)薄片，片;部分;份额;锅铲;(餐桌用)小铲
v.把…切成(薄)片;切;割;划;削(球);斜切打

语法：
基本切片：
a[start:stop]
中括号中索引的范围：前闭后开
当start或stop超出上文提到的有效索引范围​时，切片操作不会抛出异常，而是进行截断
a = [0,1,2,3,4,5,6,7,8,9]
b = a[i:j] 表示复制a[i]到a[j-1]，以生成新的list对象
b = a[1:3] 那么，b的内容是 [1,2]
start和stop都是可以缺省的，在缺省的情况下，Python的行为是尽可能取最大区间
当i缺省时，默认为0，即 a[:3]相当于 a[0:3]
当j缺省时，默认为len(alist), 即a[1:]相当于a[1:10]
当i,j都缺省时，a[:]就相当于完整复制一份a了

扩展切片：
b = a[i:j:s]这种格式中，i,j与上面的一样，但s表示步进，缺省为1.
所以a[i:j:1]相当于a[i:j]
当s<0时，i缺省默认为-1. j缺省默认为-len(a)-1
所以a[::-1]相当于 a[-1:-len(a)-1:-1]，也就是从最后一个元素到第一个元素复制一遍。即倒序。

扩展切片指的是：a[start:stop:step]，其中step是一个非零整数，即比简单切片多了调整步长的功能，
从start对应的位置出发，以step为步长索引序列，直至stop对应的位置，且不包括stop本身。
事实上，简单切片就是step=1的
step为正数
当step为正数时，切片行为很容易理解，start和stop的截断和缺省规则也与简单切片完全一致
step为负数
当step为负数时，切片将其解释为从start出发以步长|step|逆序索引序列，此时，缺省发生一点变化，在缺省的情况下，Python的行为是尽可能取最大区间，
此时访问是逆序的，start应尽量取大(所以是-1)，stop应尽量取小(所以是:-长度-1)，才能保证区间最大

'''

# 1. [::-1]与[:-1] 的区别
'''
[:-1]:2位的，表示从0到-1 且包括0不包括-1
[::-1]:3位的，首尾缺省，表示整份，
'''
# 2.字符串中使用切片
# 3.集合set中使用切片
# 4.列表list中使用切片
# 5.数字中使用切片
# 6.元组中使用切片
# 7.字典中使用切片

a = 'python'
print(a[::-1]) # nohtyp
print(a[:-1]) # pytho
# len(a) 省略跟不省略的结果不一样？为什么？
print(a[0:len(a):-1]) # 输出为空
print(a[0::-1]) # p

